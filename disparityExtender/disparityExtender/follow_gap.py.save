import rclpy
import numpy as np
from rclpy.node import Node
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist


class FollowGap(Node):
    def __init__(self):
        super().__init__('follow_gap')
        self.lidar_sub = self.create_subscription(LaserScan, '/scan', self.lidar_callback, 10)
        self.cmd_pub = self.create_publisher(Twist, '/cmd_vel', 10)
        self.safe_distance = 2.0  # Increased distance threshold to handle faster speeds

    def lidar_callback(self, scan):
        # Convert ranges to a NumPy array
        ranges = np.array(scan.ranges)
        ranges = np.clip(ranges, scan.range_min, scan.range_max)

        # Mask invalid readings (e.g., 0.0 or inf)
        ranges[np.isnan(ranges)] = 0
        ranges[np.isinf(ranges)] = 0

        # Step 1: Preprocess - Ignore points closer than a safe distance
        ranges[ranges < self.safe_distance] = 0

        # Step 2: Find the largest gap
        gap_start, gap_end = self.find_largest_gap(ranges)

        # Step 3: Find the best point within the largest gap
        # Bias toward the center for smoother navigation
        best_point = int((gap_start + gap_end) * 0.3 + len(ranges) * 0.7) // 2

        # Step 4: Convert the best point to an angle
        angle_increment = scan.angle_increment
        steering_angle = ((best_point - len(ranges) // 2) * angle_increment)/4

        # Step 5: Publish velocity command
        self.publish_command(steering_angle)

    def find_largest_gap(self, ranges):
        """Find the largest gap in the LiDAR scan."""
        gaps = []
        gap_start = None

        for i, distance in enumerate(ranges):
            if distance > 0 and gap_start is None:
                gap_start = i
            elif distance == 0 and gap_start is not None:
                gaps.append((gap_start, i - 1))
                gap_start = None

        if gap_start is not None:
            gaps.append((gap_start, len(ranges) - 1))

        # Return the largest gap
        largest_gap = max(gaps, key=lambda x: x[1] - x[0], default=(0, 0))
        return largest_gap

    def publish_command(self, steering_angle):
        """Publish the velocity command to move toward the gap."""
        cmd = Twist()
        # Dynamic speed adjustment: faster on straights, slower on turns
        cmd.linear.x = max(1.0, 3.0 - abs(steering_angle) * 5)  # Speed dynamically adjusted
        cmd.angular.z = steering_angle
        self.cmd_pub.publish(cmd)
        self.get_logger().info(f"Speed: {cmd.linear.x:.2f} m/s, Steering Angle: {steering_angle:.2f} rad")


def main(args=None):
    rclpy.init(args=args)
    node = FollowGap()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
